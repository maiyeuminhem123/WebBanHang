@model Bai3_WebBanHang.Models.Order

@{
    ViewData["Title"] = "Chi Tiết Đơn Hàng";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center pt-3 pb-2 mb-4 border-bottom">
        <h1 class="h2">Chi Tiết Đơn Hàng <span class="text-danger">#@Model.Id</span></h1>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Quay Lại
        </a>
    </div>

    <div id="notification-area"></div>

    <div class="row">
        <!-- Cột thông tin khách hàng và đơn hàng -->
        <div class="col-lg-7">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-user-circle me-2"></i>Thông Tin Khách Hàng</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Tên Khách Hàng:</dt>
                        <dd class="col-sm-8">@Model.CustomerName</dd>

                        <dt class="col-sm-4">Số Điện Thoại:</dt>
                        <dd class="col-sm-8">@Model.PhoneNumber</dd>

                        <dt class="col-sm-4">Email:</dt>
                        <dd class="col-sm-8">@Model.Email</dd>

                        <dt class="col-sm-4">Địa Chỉ Giao Hàng:</dt>
                        <dd class="col-sm-8">@Model.ShippingAddress</dd>
                    </dl>
                </div>
            </div>
             <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-file-invoice-dollar me-2"></i>Thông Tin Đơn Hàng</h5>
                </div>
                <div class="card-body">
                     <dl class="row mb-0">
                        <dt class="col-sm-4">Ngày Đặt:</dt>
                        <dd class="col-sm-8">@Model.OrderDate.ToString("dd/MM/yyyy HH:mm")</dd>

                        <dt class="col-sm-4">Thanh Toán:</dt>
                        <dd class="col-sm-8"><span class="badge bg-dark">@Model.PaymentMethod</span></dd>

                         <dt class="col-sm-4">Ghi Chú:</dt>
                        <dd class="col-sm-8">@(string.IsNullOrEmpty(Model.Notes) ? "Không có" : Model.Notes)</dd>
                    </dl>
                </div>
            </div>
             <div class="card shadow-sm">
                <div class="card-header">
                     <h5 class="mb-0"><i class="fas fa-box-open me-2"></i>Sản Phẩm Đã Đặt</h5>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var item in Model.OrderDetails)
                    {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                               <div>
                                @item.Product.Name
                                   <small class="d-block text-muted">SL: @item.Quantity x @item.Price.ToString("N0") ₫</small>
                               </div>
                               <span class="fw-bold">@((item.Quantity * item.Price).ToString("N0")) ₫</span>
                            </li>
                    }
                    <li class="list-group-item d-flex justify-content-between align-items-center bg-dark text-white">
                        <strong class="fs-5">TỔNG CỘNG</strong>
                        <strong class="fs-5 text-danger">@Model.TotalPrice.ToString("N0") ₫</strong>
                    </li>
                </ul>
            </div>
        </div>

        <!-- Cột hành động và timeline -->
        <div class="col-lg-5">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                     <h5 class="mb-0"><i class="fas fa-tasks me-2"></i>Cập Nhật Trạng Thái</h5>
                </div>
                <div class="card-body text-center" id="order-actions-container">
                    <p>Trạng Thái Hiện Tại: <span id="current-status-badge" class="badge fs-6"></span></p>
                    <div id="order-actions" class="mt-3">
                        <!-- Các nút hành động sẽ được render bởi JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const orderId = @Model.Id;
            let currentStatus = "@Model.OrderStatus";

            // Hàm cập nhật giao diện (trạng thái và các nút hành động)
            function updateView(status) {
                currentStatus = status;
                const $statusBadge = $('#current-status-badge');
                const $actionsContainer = $('#order-actions');
                let badgeClass = 'bg-secondary';
                let badgeText = status;
                let actionsHtml = '';

                const actionButton = (newStatus, btnClass, icon, text) => 
                    `<button class="btn btn-sm ${btnClass} w-100 mt-2 action-btn" data-status="${newStatus}"><i class="fas ${icon} me-2"></i>${text}</button>`;

                switch (status) {
                    case 'Đang chờ thanh toán':
                        badgeClass = 'bg-warning text-dark';
                        actionsHtml = `<p class="text-muted">Chờ khách hàng thanh toán online.</p>` +
                                      actionButton('Đã hủy', 'btn-danger', 'fa-times-circle', 'Hủy Đơn Hàng');
                        break;
                    case 'Đang xử lý':
                        badgeClass = 'bg-primary';
                        actionsHtml = actionButton('Đã xác nhận', 'btn-success', 'fa-check-circle', 'Xác Nhận Đơn Hàng') +
                                      actionButton('Đã hủy', 'btn-danger', 'fa-times-circle', 'Hủy Đơn Hàng');
                        break;
                    case 'Đã thanh toán':
                    case 'Đã xác nhận':
                        badgeText = status === 'Đã thanh toán' ? 'Đã thanh toán' : 'Đã xác nhận';
                        badgeClass = 'bg-success';
                        actionsHtml = actionButton('Đang giao hàng', 'btn-info', 'fa-truck', 'Bắt Đầu Giao Hàng');
                        break;
                    case 'Đang giao hàng':
                        badgeClass = 'bg-info text-dark';
                        actionsHtml = actionButton('Đã giao thành công', 'btn-success', 'fa-check-double', 'Xác Nhận Đã Giao');
                        break;
                    case 'Đã giao thành công':
                        badgeClass = 'bg-secondary';
                        actionsHtml = `<p class="text-center text-success fw-bold"><i class="fas fa-check-circle"></i> Đơn hàng đã hoàn tất.</p>`;
                        break;
                    case 'Đã hủy':
                        badgeClass = 'bg-danger';
                        actionsHtml = `<p class="text-center text-danger fw-bold"><i class="fas fa-times-circle"></i> Đơn hàng đã bị hủy.</p>`;
                        break;
                }

                $statusBadge.removeClass().addClass(badgeClass).text(badgeText);
                $actionsContainer.html(actionsHtml);
            }

            // Gắn sự kiện click động cho các nút action
            $('#order-actions').on('click', '.action-btn', function() {
                const newStatus = $(this).data('status');
                if (confirm(`Bạn có chắc chắn muốn cập nhật trạng thái đơn hàng thành "${newStatus}"?`)) {
                    updateStatusOnServer(newStatus);
                }
            });

            // Hàm gọi AJAX để cập nhật trạng thái trên server
            function updateStatusOnServer(newStatus) {
                $.ajax({
                    url: '@Url.Action("UpdateStatus", "Order")',
                    type: 'POST',
                    data: {
                        id: orderId,
                        status: newStatus
                    },
                    success: function(response) {
                        if (response.success) {
                            showNotification('Cập nhật trạng thái thành công!', 'success');
                            updateView(newStatus); // Cập nhật lại giao diện với trạng thái mới
                        } else {
                            showNotification(response.message, 'danger');
                        }
                    },
                    error: function() {
                        showNotification('Đã có lỗi xảy ra. Vui lòng thử lại.', 'danger');
                    }
                });
            }

            // Hàm hiển thị thông báo
            function showNotification(message, type) {
                const alertHtml = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                                    ${message}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                   </div>`;
                $('#notification-area').html(alertHtml);
            }

            // Khởi tạo giao diện lần đầu
            updateView(currentStatus);
        });
    </script>
}

