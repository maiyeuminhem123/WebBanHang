@model Bai3_WebBanHang.Models.Order

@{
    ViewData["Title"] = "Chi Tiết Đơn Hàng";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center pt-3 pb-2 mb-4 border-bottom">
        <h1 class="h2">Chi Tiết Đơn Hàng <span class="text-danger">#@Model.Id</span></h1>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Quay Lại
        </a>
    </div>

    <div id="notification-area"></div>

    <div class="row">
        <div class="col-lg-7">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-user-circle me-2"></i>Thông Tin Khách Hàng</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Tên Khách Hàng:</dt>
                        <dd class="col-sm-8">@Model.CustomerName</dd>
                        <dt class="col-sm-4">Số Điện Thoại:</dt>
                        <dd class="col-sm-8">@Model.PhoneNumber</dd>
                        <dt class="col-sm-4">Email:</dt>
                        <dd class="col-sm-8">@Model.Email</dd>
                        <dt class="col-sm-4">Địa Chỉ Giao Hàng:</dt>
                        <dd class="col-sm-8">@Model.ShippingAddress</dd>
                    </dl>
                </div>
            </div>
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-file-invoice-dollar me-2"></i>Thông Tin Đơn Hàng</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Mã Đơn Hàng:</dt>
                        <dd class="col-sm-8">@Model.OrderCode</dd>
                        <dt class="col-sm-4">Ngày Đặt:</dt>
                        <dd class="col-sm-8">@Model.OrderDate.ToString("dd/MM/yyyy HH:mm")</dd>
                        <dt class="col-sm-4">Thanh Toán:</dt>
                        <dd class="col-sm-8"><span class="badge bg-dark">@(Model.PaymentMethod ?? "Chưa chọn")</span></dd>
                        <dt class="col-sm-4">Ghi Chú:</dt>
                        <dd class="col-sm-8">@(string.IsNullOrEmpty(Model.Notes) ? "Không có" : Model.Notes)</dd>
                    </dl>
                </div>
            </div>
            <div class="card shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-box-open me-2"></i>Sản Phẩm Đã Đặt</h5>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var item in Model.OrderDetails)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                @(item.Product?.Name ?? "Sản phẩm không xác định")
                                <small class="d-block text-muted">SL: @item.Quantity x @item.UnitPrice.ToString("N0") ₫</small>
                            </div>
                            <span class="fw-bold">@((item.Quantity * item.UnitPrice).ToString("N0")) ₫</span>
                        </li>
                    }
                    <li class="list-group-item d-flex justify-content-between align-items-center bg-dark text-white">
                        <strong class="fs-5">TỔNG CỘNG</strong>
                        <strong class="fs-5 text-danger">@Model.TotalAmount.ToString("N0") ₫</strong>
                    </li>
                </ul>
            </div>
        </div>

        <div class="col-lg-5">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-tasks me-2"></i>Trạng Thái Đơn Hàng</h5>
                </div>
                <div class="card-body">
                    <div class="shipping-timeline position-relative mb-4 p-3 rounded-3">
                        <div class="progress-line"></div>
                        <div class="timeline-steps d-flex justify-content-between flex-wrap">
                            <div class="timeline-step @(new[] { "Pending", "Confirmed", "Preparing", "Shipping", "Delivered" }.Contains(Model.OrderStatus) ? "active" : "")">
                                <div class="timeline-icon"><i class="fas fa-clock"></i></div>
                                <p class="mb-0">Chờ xử lý</p>
                            </div>
                            <div class="timeline-step @(new[] { "Confirmed", "Preparing", "Shipping", "Delivered" }.Contains(Model.OrderStatus) ? "active" : "")">
                                <div class="timeline-icon"><i class="fas fa-check-circle"></i></div>
                                <p class="mb-0">Đã xác nhận</p>
                            </div>
                            <div class="timeline-step @(new[] { "Preparing", "Shipping", "Delivered" }.Contains(Model.OrderStatus) ? "active" : "")">
                                <div class="timeline-icon"><i class="fas fa-box-open"></i></div>
                                <p class="mb-0">Chuẩn bị hàng</p>
                            </div>
                            <div class="timeline-step @(new[] { "Shipping", "Delivered" }.Contains(Model.OrderStatus) ? "active" : "")">
                                <div class="timeline-icon"><i class="fas fa-truck"></i></div>
                                <p class="mb-0">Đang giao</p>
                            </div>
                            <div class="timeline-step @(Model.OrderStatus == "Delivered" ? "active" : "")">
                                <div class="timeline-icon"><i class="fas fa-check-double"></i></div>
                                <p class="mb-0">Đã giao</p>
                            </div>
                            <div class="timeline-step @(Model.OrderStatus == "Cancelled" ? "active" : "")">
                                <div class="timeline-icon"><i class="fas fa-times-circle"></i></div>
                                <p class="mb-0">Đã hủy</p>
                            </div>
                        </div>
                    </div>

                    <div class="text-center" id="order-actions-container">
                        <p>Trạng Thái Hiện Tại: <span id="current-status-badge" class="badge fs-6"></span></p>
                        <div id="order-actions" class="mt-3">
                        </div>
                    </div>

                    <div class="mt-3">
                        <h6 class="mb-2">Lịch Sử Trạng Thái</h6>
                        <ul class="list-group list-group-flush" id="status-history">
                            @foreach (var history in Model.StatusHistory.OrderBy(h => h.UpdatedAt))
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>
                                        <span class="badge @(ViewBag.StatusDisplayNames.ContainsKey(history.Status) ? "bg-info" : "bg-secondary")">
                                            @(ViewBag.StatusDisplayNames.ContainsKey(history.Status) ? ViewBag.StatusDisplayNames[history.Status] : history.Status)
                                        </span>
                                        <small class="text-muted ms-2">@history.UpdatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                    </span>
                                    <span class="text-muted">@(history.Notes ?? "Không có ghi chú")</span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .card {
            border: none;
            border-radius: 8px;
            background-color: #fff;
        }

        .shipping-timeline {
            background-color: #f8f9fa;
            position: relative;
            overflow: hidden;
            padding: 20px;
        }

        .progress-line {
            position: absolute;
            top: 30px; /* Điều chỉnh cho phù hợp với icon */
            left: 10%;
            right: 10%;
            height: 4px;
            background-color: #e9ecef;
            z-index: 1;
        }

        .timeline-steps {
            position: relative;
            z-index: 2;
        }

        .timeline-step {
            text-align: center;
            flex: 1;
            min-width: 100px;
            margin-bottom: 15px;
        }

            .timeline-step.active .timeline-icon {
                background-color: #28a745;
                color: #fff;
                border-color: #28a745;
                transform: scale(1.1);
            }

            .timeline-step.active p {
                color: #28a745;
                font-weight: 500;
            }

        .timeline-icon {
            width: 40px;
            height: 40px;
            margin: 10px auto 8px; /* Thêm margin top */
            background-color: #fff;
            border: 2px solid #e9ecef;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            transition: all 0.3s ease;
        }

        .timeline-step.active .timeline-icon i {
            animation: pulse 1.5s infinite;
        }

        .btn {
            border-radius: 6px;
            padding: 6px 12px;
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

            .btn-success:hover {
                background-color: #218838;
                border-color: #1e7e34;
            }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

            .btn-danger:hover {
                background-color: #c82333;
                border-color: #bd2130;
            }

        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
        }

            .btn-info:hover {
                background-color: #138496;
                border-color: #117a8b;
            }

        .btn-secondary {
            background-color: #6c757d;
            border-color: #6c757d;
        }

            .btn-secondary:hover {
                background-color: #5a6268;
                border-color: #545b62;
            }

        .badge {
            padding: 6px 12px;
            font-size: 0.85rem;
            border-radius: 12px;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }

        .spinner-border {
            width: 3rem;
            height: 3rem;
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.2);
            }

            100% {
                transform: scale(1);
            }
        }
    </style>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @Html.AntiForgeryToken()
    <script>
        $(document).ready(function () {
            const orderId = @Model.Id;
            const statusDisplayNames = @Html.Raw(Json.Serialize(ViewBag.StatusDisplayNames));
            let currentStatus = "@Model.OrderStatus" || "Pending";

            // SỬA LẠI Ở ĐÂY
            function updateView(status) {
                const displayStatus = statusDisplayNames[status] || status;
                const $statusBadge = $('#current-status-badge');
                const $actionsContainer = $('#order-actions');
                let badgeClass = 'bg-secondary';
                let actionsHtml = '';

                const actionButton = (newStatusKey, btnClass, icon, text) =>
                    `<button class="btn btn-sm ${btnClass} w-100 mt-2 action-btn" data-status="${newStatusKey}"><i class="fas ${icon} me-2"></i>${text}</button>`;

                switch (status) {
                    case 'Pending':
                        badgeClass = 'bg-warning text-dark';
                        actionsHtml = `<p class="text-muted">Chờ xác nhận đơn hàng.</p>` +
                                      actionButton('Confirmed', 'btn-success', 'fa-check-circle', 'Xác Nhận Đơn Hàng') +
                                      actionButton('Cancelled', 'btn-danger', 'fa-times-circle', 'Hủy Đơn Hàng');
                        break;
                    case 'Confirmed':
                        badgeClass = 'bg-success';
                        actionsHtml = actionButton('Preparing', 'btn-primary', 'fa-box-open', 'Chuẩn Bị Hàng') +
                                      actionButton('Cancelled', 'btn-danger', 'fa-times-circle', 'Hủy Đơn Hàng');
                        break;
                    case 'Preparing':
                        badgeClass = 'bg-primary';
                        actionsHtml = actionButton('Shipping', 'btn-info', 'fa-truck', 'Bắt Đầu Giao Hàng');
                        break;
                    case 'Shipping':
                        badgeClass = 'bg-info text-dark';
                        actionsHtml = actionButton('Delivered', 'btn-success', 'fa-check-double', 'Xác Nhận Đã Giao');
                        break;
                    case 'Delivered':
                        badgeClass = 'bg-primary';
                        actionsHtml = `<p class="text-center text-primary fw-bold"><i class="fas fa-check-circle"></i> Đơn hàng đã hoàn tất.</p>`;
                        break;
                    case 'Cancelled':
                        badgeClass = 'bg-danger';
                        actionsHtml = `<p class="text-center text-danger fw-bold"><i class="fas fa-times-circle"></i> Đơn hàng đã bị hủy.</p>`;
                        break;
                }

                $statusBadge.removeClass().addClass(`badge fs-6 ${badgeClass}`).text(displayStatus);
                $actionsContainer.html(actionsHtml);
                updateTimeline(status);
            }

            // SỬA LẠI Ở ĐÂY
            function updateTimeline(status) {
                $('.timeline-step').removeClass('active');
                const statusOrder = ["Pending", "Confirmed", "Preparing", "Shipping", "Delivered"];
                const currentIndex = statusOrder.indexOf(status);

                if (currentIndex !== -1) {
                    for (let i = 0; i <= currentIndex; i++) {
                        $('.timeline-step').eq(i).addClass('active');
                    }
                }

                if (status === 'Cancelled') {
                    // Bước thứ 6 trong HTML (index 5) là nút Hủy
                    $('.timeline-step').eq(5).addClass('active');
                }
            }

            $('#order-actions').on('click', '.action-btn', function() {
                const newStatus = $(this).data('status');
                // Thay thế confirm bằng một modal đẹp hơn nếu muốn
                if (confirm(`Bạn có chắc chắn muốn cập nhật trạng thái đơn hàng?`)) {
                    updateStatusOnServer(newStatus);
                }
            });

            function updateStatusOnServer(newStatus) {
                $.ajax({
                    url: '@Url.Action("UpdateStatus", "Order", new { area = "Admin" })',
                    type: 'POST',
                    data: {
                        id: orderId,
                        status: newStatus,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    beforeSend: function() {
                        $('body').append('<div class="loading-overlay"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');
                    },
                    success: function(response) {
                        if (response.success) {
                            showNotification('Cập nhật trạng thái thành công!', 'success');
                            currentStatus = response.newStatus; // Cập nhật trạng thái hiện tại
                            updateView(currentStatus);

                            const historyHtml = `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>
                                    <span class="badge bg-info">${statusDisplayNames[response.newStatus]}</span>
                                    <small class="text-muted ms-2">${new Date().toLocaleString('vi-VN')}</small>
                                </span>
                                <span class="text-muted">Admin đã cập nhật.</span>
                            </li>`;
                            $('#status-history').append(historyHtml);
                        } else {
                            showNotification(response.message, 'danger');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAX Error:', xhr, status, error);
                        showNotification('Đã có lỗi xảy ra. Vui lòng thử lại.', 'danger');
                    },
                    complete: function() {
                        $('.loading-overlay').remove();
                    }
                });
            }

            function showNotification(message, type) {
                const alertHtml = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`;
                $('#notification-area').html(alertHtml);
                setTimeout(() => $('.alert').alert('close'), 5000);
            }

            // Khởi tạo view lần đầu
            updateView(currentStatus);
        });
    </script>
}